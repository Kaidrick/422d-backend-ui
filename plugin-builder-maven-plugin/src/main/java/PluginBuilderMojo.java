import org.apache.maven.artifact.DependencyResolutionRequiredException;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.apache.maven.project.MavenProject;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.stream.Collectors;


@Mojo(name = "plugin-builder", defaultPhase = LifecyclePhase.COMPILE,
        requiresDependencyResolution = ResolutionScope.COMPILE)
public class PluginBuilderMojo extends AbstractMojo {

    @Parameter(defaultValue = "${project}", required = true, readonly = true)
    MavenProject project;

    private static final String pluginPackage = "moe.ofs.backend.plugin";
    private static final String pluginDirectory = "backend-core/src/main/java/moe/ofs/backend/plugin";

    @SuppressWarnings("rawtypes")
    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {
        Properties properties = new Properties();

        try {
            Path pluginPath = Paths.get(pluginDirectory);
            List<Path> pluginList = Files.walk(pluginPath)
                    .filter(c -> c.toString().endsWith(".java"))
                    .collect(Collectors.toList());

            getLog().info("Bake " + Files.list(pluginPath).count() + " plugins with classes: "
                    + pluginList.stream().map(e -> e.getFileName().toString().replace(".java", ""))
                    .collect(Collectors.joining(", ")));

            getLog().info(("compile cp: " +
                    this.project.getCompileClasspathElements()));

            URL[] runtimeUrls = getPackageUrls();

            URLClassLoader classLoader =
                    new URLClassLoader(runtimeUrls, Thread.currentThread().getContextClassLoader());

            Class pluginInterface = classLoader.loadClass("moe.ofs.backend.Plugin");

            for (Path plugin : pluginList) {
                String pluginName = plugin.getName(plugin.getNameCount() - 2).toString();
                String pluginMainClass = plugin.getFileName().toString().replace(".java", "");

                Class targetClass =
                        classLoader.loadClass(pluginPackage + "."
                                + pluginName + "." + pluginMainClass);

//                System.out.println(Arrays.toString(targetClass.getInterfaces()));
                if (Arrays.asList(targetClass.getInterfaces()).contains(pluginInterface)) {
                    properties.setProperty(pluginName, pluginMainClass);
                }
            }

            // write to properties file
            getLog().info("Generated plugin config properties: " + properties);

            Path path = Paths.get("backend-core/src/main/resources/enabled_plugins.properties");
            try (FileOutputStream fileOutputStream = new FileOutputStream(path.toFile())) {
                properties.store(fileOutputStream,
                        "List of enabled plugins, generated by plugin-builder");
            }
        } catch (IOException | ClassNotFoundException | DependencyResolutionRequiredException e) {
            e.printStackTrace();
        }
    }

    @SuppressWarnings("rawtypes")
    private URL[] getPackageUrls() throws DependencyResolutionRequiredException, MalformedURLException {
        List compileClasspathElements = project.getCompileClasspathElements();
        URL[] runtimeUrls = new URL[compileClasspathElements.size()];
        for (int i = 0; i < compileClasspathElements.size(); i++) {
            String element = (String) compileClasspathElements.get(i);
            runtimeUrls[i] = new File(element).toURI().toURL();
        }
        return runtimeUrls;
    }
}
